// Code generated by go-bindata.
// sources:
// bin.tmpl
// bindata.go
// completion_bash.tmpl
// completion_zsh.tmpl
// gen.go
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _binTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xac\xae\x56\xd0\x0b\xce\x48\xcd\xc9\x51\xa8\xad\xe5\xe2\x4a\xad\x48\x4d\x56\x48\x49\x2c\x4a\x2f\x56\x28\x2a\xcd\x53\xd0\xd5\x55\x00\xc9\x3b\xe7\xa6\xb8\x95\x82\x55\x28\x28\xa9\x38\x28\x71\x01\x02\x00\x00\xff\xff\x96\x42\x6f\x76\x36\x00\x00\x00")

func binTmplBytes() ([]byte, error) {
	return bindataRead(
		_binTmpl,
		"bin.tmpl",
	)
}

func binTmpl() (*asset, error) {
	bytes, err := binTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin.tmpl", size: 54, mode: os.FileMode(436), modTime: time.Unix(1504974631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(436), modTime: time.Unix(1505709765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _completion_bashTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x61\x6b\xdb\x30\x14\xfc\xee\x5f\x71\x18\x53\xdb\x19\x4a\xb6\xaf\x1b\x1e\x83\xb2\xc0\x60\x63\x65\xfb\x34\xd2\x4c\xb8\xf6\xb3\x63\x90\x25\x23\xc9\x5e\x9b\x38\xff\x7d\x48\x69\x1d\xa7\xdb\x58\xfd\x45\xe2\xbd\xbb\x7b\xe7\xe3\x89\xef\xcb\x5c\xd7\x86\x1f\x0e\x58\x5e\xb7\x25\x8e\x47\x9e\xf7\x56\x15\xaa\xed\x04\x59\x4a\x52\x1c\x02\x00\x10\xaa\xc8\x05\xee\x72\x43\xe8\xb4\xaa\x7d\xcd\x5d\xb2\xf0\xcc\x0c\x83\x19\xb4\xe8\x35\x3a\x4d\x03\x7e\x29\x5d\x1a\x14\xee\xf0\xed\xeb\xaf\x5f\x6e\xbe\x7d\xbc\xf9\xfc\x23\x4b\x52\x5f\xe0\x35\x59\xee\x06\x72\x0f\xe5\x77\x0f\x5c\x53\x05\x26\xf1\xf6\xdf\x2a\xaa\xb3\x26\x8b\x12\x6f\x1e\x8f\x6e\x1b\x25\x0d\x18\x43\x18\x39\x67\xa1\x3f\x69\x70\x67\xd1\xeb\xf0\x34\xac\xa9\xb0\xd9\x20\x72\x74\x6c\xb7\xef\x60\x77\x24\x7d\xe3\x79\x33\xc3\x29\x98\x6a\x5f\x2d\x1c\xf2\x02\xe8\xbe\x42\xb5\x6d\x2e\x4b\xb0\x01\xd5\xbe\x62\xb6\xed\xef\xf1\x1e\xab\x92\x86\x95\xec\x85\xc0\xd5\x95\xab\xf3\xa2\x2d\xb3\xa9\x3f\x8e\xf3\xda\x85\xdc\xa7\xf5\xf7\x2c\x8a\x6f\x65\x3c\x0f\x08\x51\x42\xc5\x4e\x21\xf4\x9e\x42\x8c\xa8\x35\x75\x60\xc3\xfd\x1a\xf1\xe4\x2f\xc6\x88\xe8\x51\x37\x45\x3a\xc9\x92\x30\xf4\x92\x19\xfe\x7f\xcf\xb4\xaa\x99\xae\x9c\x0b\xab\x9b\x96\x17\x4a\x28\xc9\xe7\x31\x9f\x32\x9d\x80\x9a\x6c\xaf\x25\x5e\x07\x33\x01\xfb\xd0\x11\xa2\xa7\x05\x33\x66\xc7\x95\x6e\xea\xe7\x19\xfd\x09\x08\xa3\x0f\x27\xe1\x49\xf4\x18\x04\x9c\x0b\x95\x97\x33\x0b\x38\xef\x5d\xf0\x97\x25\x76\x4a\x59\x94\x3c\xed\x31\x58\x37\x23\x60\x84\xa1\x12\x4c\x13\x62\xb3\x5a\x2e\xd8\x1a\xc9\xe6\x27\xb6\xaf\xd2\xe5\x62\x75\xfb\x66\x15\xa7\xc1\x99\xa8\x50\x35\x82\x64\xde\x92\x01\x5b\xe3\x3f\x0f\x06\x17\xef\xe1\x77\x00\x00\x00\xff\xff\x59\xf0\x7e\x93\x5e\x03\x00\x00")

func completion_bashTmplBytes() ([]byte, error) {
	return bindataRead(
		_completion_bashTmpl,
		"completion_bash.tmpl",
	)
}

func completion_bashTmpl() (*asset, error) {
	bytes, err := completion_bashTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion_bash.tmpl", size: 862, mode: os.FileMode(436), modTime: time.Unix(1505709421, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _completion_zshTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\x51\x6b\xfa\x30\x14\xc5\xdf\xf3\x29\x0e\x21\x68\xfd\x43\xff\x6e\xcf\xa3\x63\x20\xdb\xe3\x1e\x64\x7b\x2a\x21\x14\x93\x68\xc1\x36\x25\x49\x9d\xb3\xcd\x77\x1f\xd1\xce\x8a\x28\x7b\xcc\x39\x37\xe7\xfe\xee\x4d\xc4\x41\x16\x76\xed\x44\xd7\xe1\xff\xa2\x92\x08\x41\x14\xad\x37\x2b\x53\x35\x5b\xe5\x55\x32\x43\x47\x00\xd3\x78\x27\x5c\xc6\x92\x63\x31\x06\xb7\x34\xb5\x43\x9a\x82\xb2\xee\xcb\x58\xe9\xf2\x47\x1e\xe8\x78\x5a\x7c\x2e\x97\xaf\xef\x1f\xe9\x4d\x95\x07\x3a\x23\x40\xa9\x91\xe7\x60\xa7\x7c\x64\x38\xc1\xe8\x83\xfe\x07\xce\x9f\xfc\x46\xd5\x04\x40\x6c\x58\x15\xb5\x44\xba\x83\x3e\xe8\xd4\x57\xed\x1e\xcf\x98\x4b\xb5\x9b\xd7\xed\x76\x8b\xc9\x24\xea\x62\x55\xc9\xec\xec\xf7\xfd\xa5\x76\x8c\x39\x8f\xa1\x56\x1b\x03\x3a\xb4\xa5\xe8\xb1\xb6\xaa\x41\xba\xdb\xbf\x61\x7a\x46\x98\xa2\x07\x1b\x22\x22\xab\x2e\x87\x4d\x64\x09\x58\x97\xe8\xd9\xe9\x7a\xc0\xd5\x20\x91\x1c\x97\xe8\x4d\x21\x65\x5c\x40\x34\xf3\x17\x1e\xe8\x6f\x98\xff\x6e\x14\xd8\x8d\x27\x30\xb6\x5c\x5f\x0f\x78\xaf\x8e\x00\x56\xf9\xd6\xd6\x78\x20\x81\x90\x3b\x55\x19\x13\x91\xc4\xe5\xa3\xce\x49\x54\xa4\xd2\xf8\xe3\x13\x80\x8e\x06\x25\x3f\x01\x00\x00\xff\xff\xe7\x39\xf5\x77\x32\x02\x00\x00")

func completion_zshTmplBytes() ([]byte, error) {
	return bindataRead(
		_completion_zshTmpl,
		"completion_zsh.tmpl",
	)
}

func completion_zshTmpl() (*asset, error) {
	bytes, err := completion_zshTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "completion_zsh.tmpl", size: 562, mode: os.FileMode(436), modTime: time.Unix(1505709268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _genGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x48\x49\x2c\x49\xe4\xe2\xd2\xd7\x4f\xcf\xb7\x4a\x4f\xcd\x4b\x2d\x4a\x2c\x49\x55\x48\xcf\xd7\x4d\xca\xcc\x03\xc9\x28\xe8\x16\x64\xa7\x2b\xa8\xb8\xfb\x07\x38\x3a\x7b\x3b\xba\xbb\x2a\xe8\xe6\x2b\x40\xa5\xf4\xd2\xf3\x15\xf4\xb8\x00\x01\x00\x00\xff\xff\xaa\xab\xfd\xf1\x47\x00\x00\x00")

func genGoBytes() ([]byte, error) {
	return bindataRead(
		_genGo,
		"gen.go",
	)
}

func genGo() (*asset, error) {
	bytes, err := genGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.go", size: 71, mode: os.FileMode(436), modTime: time.Unix(1505235087, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bin.tmpl": binTmpl,
	"bindata.go": bindataGo,
	"completion_bash.tmpl": completion_bashTmpl,
	"completion_zsh.tmpl": completion_zshTmpl,
	"gen.go": genGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bin.tmpl": &bintree{binTmpl, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"completion_bash.tmpl": &bintree{completion_bashTmpl, map[string]*bintree{}},
	"completion_zsh.tmpl": &bintree{completion_zshTmpl, map[string]*bintree{}},
	"gen.go": &bintree{genGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

